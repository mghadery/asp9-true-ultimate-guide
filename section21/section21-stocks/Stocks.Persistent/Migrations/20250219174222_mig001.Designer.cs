// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stocks.Persistent;

#nullable disable

namespace Stocks.Persistent.Migrations
{
    [DbContext(typeof(StocksDbContext))]
    [Migration("20250219174222_mig001")]
    partial class mig001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Stocks.Entities.BuyOrder", b =>
                {
                    b.Property<Guid>("BuyOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BuyOrderID");

                    b.Property<DateTime>("DateAndTimeOfOrder")
                        .HasColumnType("datetime2(3)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StockSymbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BuyOrderID");

                    b.ToTable("BuyOrder", null, t =>
                        {
                            t.HasCheckConstraint("priceCheck", "Price >= 1 and Price <= 10000");

                            t.HasCheckConstraint("quantityCheck", "Quantity >= 1 and Quantity <= 100000");
                        });
                });

            modelBuilder.Entity("Stocks.Entities.SellOrder", b =>
                {
                    b.Property<Guid>("SellOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SellOrderID");

                    b.Property<DateTime>("DateAndTimeOfOrder")
                        .HasColumnType("datetime2(3)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StockSymbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SellOrderID");

                    b.ToTable("SellOrder", null, t =>
                        {
                            t.HasCheckConstraint("priceCheck", "Price >= 1 and Price <= 10000")
                                .HasName("priceCheck1");

                            t.HasCheckConstraint("quantityCheck", "Quantity >= 1 and Quantity <= 100000")
                                .HasName("quantityCheck1");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
